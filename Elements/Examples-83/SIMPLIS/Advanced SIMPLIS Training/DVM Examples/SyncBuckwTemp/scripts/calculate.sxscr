***
*** calculate.sxscr
***

Arguments @retval label report_dir log_file controlhandle

*** get properties off control symbol

*** nominal resistances at 25 degrees C
Let rdshs_25 = PropValues2( 'RDSHS_25' , -1 , 'handle' , controlhandle )
Let rdsls_25 = PropValues2( 'RDSLS_25' , -1 , 'handle' , controlhandle )

*** thermal resistance from junction to case
Let theta_jc_hs = PropValues2( 'THETA_JC_HS' , -1 , 'handle' , controlhandle )
Let theta_jc_ls = PropValues2( 'THETA_JC_LS' , -1 , 'handle' , controlhandle )

*** tempcos
Let tempco_rds_hs = PropValues2( 'TEMPCO_RDS_HS' , -1 , 'handle' , controlhandle )
Let tempco_rds_ls = PropValues2( 'TEMPCO_RDS_LS' , -1 , 'handle' , controlhandle )

*** next, we need to get the power measurements from the probes. We have a function which gets all probe measurements.
*** return is an string array similar to:
***   30	'Power(QHS);Mean;484.09954mW'
***   31	'Power(QLS);Mean;473.06649mW'
Let probe_meas = GetAllFixedProbeMeasurements()

*** we use SelectRows() twice to find the data we want.
Let hs_power_probe_meas = SelectRows( probe_meas , 'DVM Power(QHS)' , 0 )
Let ls_power_probe_meas = SelectRows( probe_meas , 'DVM Power(QLS)' , 0 )

Let user_scalars = ''
Let user_specs = ''

*** have to test for length - probe name might not exist.
if Length( hs_power_probe_meas ) then

	let hs_mean_meas = SelectRows( hs_power_probe_meas , 'Mean' , 1 )
	
	*** have to test for length - mean measurement might not exist.
	if Length( hs_mean_meas ) then
	
		*** take the very first mean measurement for the probe, and return the value measured as a string
		Let pd_hs = (Scan( hs_mean_meas[0] , "';'" , 3 ))[2]

		*** calculate
		Let rdson_hs = rdshs_25 * ( 1 + pd_hs * theta_jc_hs * tempco_rds_hs ) 
		
		Let tj_hs = 25 + pd_hs * theta_jc_hs
		
		*** write properties back to control symbol...
		prop /handle { controlhandle } { 'RDSON_HS' } { rdson_hs }
		prop /handle { controlhandle } { 'TJ_HS' } { tj_hs }
		
		*** return scalar values
		Let user_scalars = SimplisDVMAdvancedUtilCreateScalar( 'RDSON_HS' , rdson_hs , user_scalars )
		Let user_scalars = SimplisDVMAdvancedUtilCreateScalar( 'TJ_HS' , tj_hs , user_scalars )
		Let user_scalars = SimplisDVMAdvancedUtilCreateScalar( 'PD_HS' , pd_hs , user_scalars )
		
	endif
endif

*** have to test for length - probe name might not exist.
if Length( ls_power_probe_meas ) then

	let ls_mean_meas = SelectRows( ls_power_probe_meas , 'Mean' , 1 )

	*** have to test for length - mean measurement might not exist.
	if Length( hs_mean_meas ) then

		*** take the very first mean measurement for the probe, and return the value measured as a string
		Let pd_ls = (Scan( ls_mean_meas[0] , "';'" , 3 ))[2]

		*** calculate
		Let rdson_ls = rdsls_25 * ( 1 + pd_ls * theta_jc_ls * tempco_rds_ls ) 
		
		Let tj_ls = 25 + pd_ls * theta_jc_ls
		
		*** write properties back to control symbol...
		prop /handle { controlhandle } { 'RDSON_LS' } { rdson_ls }
		prop /handle { controlhandle } { 'TJ_LS' } { tj_ls }

		*** return scalar values
		Let user_scalars = SimplisDVMAdvancedUtilCreateScalar( 'RDSON_LS' , rdson_ls , user_scalars )
		Let user_scalars = SimplisDVMAdvancedUtilCreateScalar( 'TJ_LS' , tj_ls , user_scalars )
		Let user_scalars = SimplisDVMAdvancedUtilCreateScalar( 'PD_LS' , pd_ls , user_scalars )

	endif
endif

*** chop up the label - get last field - this is the run number
Let label_toks = parse( label , '|' )
Let run_num = label_toks[ Length(label_toks)-1 ]

*** create run scalar
Let user_scalars = SimplisDVMAdvancedUtilCreateScalar( 'Run' , run_num , user_scalars )

let retval = [ user_scalars , user_specs ]
