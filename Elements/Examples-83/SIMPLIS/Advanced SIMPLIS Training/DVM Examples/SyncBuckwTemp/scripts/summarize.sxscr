***
*** summarize.sxscr
***

Arguments @retval label report_dir log_file controlhandle

if StrStr( label , 'Summarize' ) > -1 then

	***
	*** generate xy plots
	***
	
	*** these are our graph names, which are on the "i" loop
	Let graph_names = [ 'DVM High Side' , 'DVM Low Side' ]
	Let annos = [ '_LS' , '_HS' ]
	
	*** these are our scalars to be plotted, which are on the "j" loop
	Let scalar_names = [ 'TJ' , 'PD' , 'RDSON' ]
	Let yunits = [ 'degrees' , 'W' , 'Ohms' ]
	Let ylabels = [ 'Junction Temp' , 'Power Diss.' , 'Rds(on)']
	
	*** loop over two graphs
	for i = 0 to length( graph_names ) - 1
		
		*** ...and three scalars
		for j = 0 to Length( scalar_names ) - 1 
		
		*** SimplisDVMAdvancedUtilMeasurementCreateXYScalarPlot argument #1:
		*** [0] X-axis scalar name
		*** [1] Y-axis scalar name
		*** [2] Scalars to extract from the report. Variables, such as ILOAD are made available by default.
		*** [3] Curve name
		*** [4] Graph name
		*** [5] Grid index - A1 is the first analog grid
		*** [6] axis name
		*** [7] optional parameter string - assigns pretty labels to graph
		
		*** this is a single function with line continuation
		Let return = SimplisDVMAdvancedUtilMeasurementCreateXYScalarPlot( [ 
+			'Run'
+			scalar_names[j] & annos[i] , 
+			scalar_names[j] & annos[i] & ' ' & 'Run' , 
+			'DVM ' & scalar_names[j] ,
+			graph_names[i] ,
+			'A' & Str(j+1) , 
+			'vert' , 
+			'xlabel=Test Number ylabel=' & ylabels[j] & ' yunits=' & yunits[j] & ' showpoints=true color=SEQ:' & j + 1 ] , 
+			log_file )

		next j

		*** put the graph on the overview report
		Let return = SimplisDVMAdvancedUtilMeasurementPromoteGraph([ graph_names[i] , Str(100-i) ], log_file)
		
	next i
	
else
	*** do nothing
endif
